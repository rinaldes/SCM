<% @purchase_request.purchase_request_details.each_with_index do |prd, i| %>
  <% product = prd.product %>
  <% hpp = SellingPrice.where("product_id=#{product.id} AND now() BETWEEN start_date AND end_date").limit(1).order('id DESC').last.hpp rescue 0 %>
  <tr>
    <td><%= product.article rescue '' %></td>
    <td><%= product.description rescue '' %></td>
    <% if (show_price rescue true) %>
    <td>
      <%= text_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][hpp_separated]", format_currency(params[:hpp] || hpp), class: "hpp",
        onkeyup: "$(this).next().val(this.value)", readonly: true %>

      <%= hidden_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][hpp]", hpp, class: 'hpp_origin' %>

      <%= hidden_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][hpp_middle]", (product.box_num.to_f rescue 0)*hpp.to_f, class: 'hpp_middle_origin' %>

      <%= hidden_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][hpp_high]", (product.box2_num.to_f rescue 0)*hpp.to_f, class: 'hpp_high_origin' %>

      <%= hidden_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][fraction_box]", (product.box_num.to_f rescue 0), class: 'fraction_box' %>

      <%= hidden_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][fraction_box2]", (product.box2_num.to_f rescue 0), class: 'fraction_box2' %>
    </td>
    <span class='hidden'><%= detail.product_id rescue '' %></span>
    <% end %>
    <td><%= text_field_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][quantity]", prd.quantity, class: 'qty', onkeyup: "set_subtotal(this)" %></td>
    <td id="td_fraction"><%= prd.fraction rescue 1 %></td>
    <td>
      <%
        unit_select = [[product.unit.try(:name), "Unit"]]
        unit_select << [product.box.try(:name), "Box"] if product.box_id.present?
        unit_select << [product.box2.try(:name), "Box 2"] if product.box2_id.present?
      %>
      <%= select_tag "purchase_request[purchase_request_details_attributes][#{prd.id}][unit_type]", options_for_select(unit_select, prd.unit_type), class: 'uom',
        onchange: "set_subtotal2(this)" %>
    </td>
    <td class='subtotal'>
    <% if (show_price rescue true) %>
      <%= number_with_precision(((hpp.to_f * prd.quantity.to_f * prd.fraction.to_f) rescue 0), :delimiter => ',', :precision => 0) %>
    <% end %>
    </td>
    <td>
      <a href="javascript:void(0)" class="btn btn-warning btn-xs custom-edit-btn" onclick="removeList(this);">
        <i class="fa fa-trash-o" rel="tooltip" data-placement="left" data-original-title="Edit"></i>
      </a>
    </td>
  </tr>
<% end %>
<script type="text/javascript">
  $(document).ready(function() {
    if($('#rc1').is(':checked')){
  //      $('.qty').prop('disabled', false);
    }
    else if($('#rc2').is(':checked')){
  //    $('.qty').prop('disabled', true);
    }
    if($('#controllernya').val() == "returns_to_suppliers"){
      $("#rts_barcode").removeClass("hide")
    }

    Number.prototype.formatMoney = function(c, d, t){
    var n = this,
        c = isNaN(c = Math.abs(c)) ? 2 : c,
        d = d == undefined ? "." : d,
        t = t == undefined ? "," : t,
        s = n < 0 ? "-" : "",
        i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;
       return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
     };
  });

  function set_subtotal2(obj){
    if ($(obj).val() == 'Unit') {
      $(obj).parent().parent().find('#td_fraction').text(1);
      $(obj).parent().parent().find('.fraction').find('input').val(1);

      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
    else if ($(obj).val() == 'Box') {
      $(obj).parent().parent().find('#td_fraction').text(parseInt($('.fraction_box').val()));
      $(obj).parent().parent().find('.fraction').find('input').val($(obj).parent().parent().find('.fraction_box').val());

      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_middle_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
    else if ($(obj).val() == 'Box 2') {
      $(obj).parent().parent().find('#td_fraction').text(parseInt($('.fraction_box2').val()));
      $(obj).parent().parent().find('.fraction').find('input').val($(obj).parent().parent().find('.fraction_box2').val());

      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_high_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
  }

  function set_subtotal(obj){
    if ($(obj).parent().parent().find('.uom').val() == 'Unit') {
      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
    else if ($(obj).parent().parent().find('.uom').val() == 'Box') {
      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_middle_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
    else if ($(obj).parent().parent().find('.uom').val() == 'Box 2') {
      $(obj).parent().parent().find('.subtotal').text(
        (parseFloat($(obj).parent().parent().find('.hpp_high_origin').val())*parseFloat($(obj).parent().parent().find('.qty').val())).formatMoney(0, '.', ',')
      )
    }
  }
</script>
